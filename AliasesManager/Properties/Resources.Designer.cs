//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AliasesManager.Properties {
    using System;
    
    
    /// <summary>
    ///   Une classe de ressource fortement typée destinée, entre autres, à la consultation des chaînes localisées.
    /// </summary>
    // Cette classe a été générée automatiquement par la classe StronglyTypedResourceBuilder
    // à l'aide d'un outil, tel que ResGen ou Visual Studio.
    // Pour ajouter ou supprimer un membre, modifiez votre fichier .ResX, puis réexécutez ResGen
    // avec l'option /str ou régénérez votre projet VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Retourne l'instance ResourceManager mise en cache utilisée par cette classe.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("AliasesManager.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Remplace la propriété CurrentUICulture du thread actuel pour toutes
        ///   les recherches de ressources à l'aide de cette classe de ressource fortement typée.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;
        ///&lt;assembly xmlns=&quot;urn:schemas-microsoft-com:asm.v1&quot; manifestVersion=&quot;1.0&quot;&gt;
        ///  &lt;assemblyIdentity version=&quot;1.0.0.0&quot; name=&quot;MyApplication.app&quot;/&gt;
        ///  &lt;trustInfo xmlns=&quot;urn:schemas-microsoft-com:asm.v2&quot;&gt;
        ///    &lt;security&gt;
        ///      &lt;requestedPrivileges xmlns=&quot;urn:schemas-microsoft-com:asm.v3&quot;&gt;
        ///        &lt;requestedExecutionLevel level=&quot;requireAdministrator&quot; uiAccess=&quot;false&quot;/&gt;
        ///      &lt;/requestedPrivileges&gt;
        ///    &lt;/security&gt;
        ///  &lt;/trustInfo&gt;
        ///&lt;/assembly&gt;.
        /// </summary>
        internal static string AdminManifest {
            get {
                return ResourceManager.GetString("AdminManifest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;
        ///&lt;assembly xmlns=&quot;urn:schemas-microsoft-com:asm.v1&quot; manifestVersion=&quot;1.0&quot;&gt;
        ///  &lt;assemblyIdentity version=&quot;1.0.0.0&quot; name=&quot;MyApplication.app&quot;/&gt;
        ///  &lt;trustInfo xmlns=&quot;urn:schemas-microsoft-com:asm.v2&quot;&gt;
        ///    &lt;security&gt;
        ///      &lt;requestedPrivileges xmlns=&quot;urn:schemas-microsoft-com:asm.v3&quot;&gt;
        ///        &lt;requestedExecutionLevel level=&quot;asInvoker&quot; uiAccess=&quot;false&quot;/&gt;
        ///      &lt;/requestedPrivileges&gt;
        ///    &lt;/security&gt;
        ///  &lt;/trustInfo&gt;
        ///&lt;/assembly&gt;.
        /// </summary>
        internal static string LimitedManifest {
            get {
                return ResourceManager.GetString("LimitedManifest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Diagnostics;
        ///using System.Text.RegularExpressions;
        ///
        ///namespace TestPipe
        ///{
        ///    class Program
        ///    {
        ///        const string command = [COMMAND];
        ///        const bool load_profile = [LOAD_PROFILE];
        ///        const bool convert_args = [CONVERT_ARGS];
        ///        static int Main(string[] args)
        ///        {
        ///            //Console.TreatControlCAsInput = true;
        ///            Console.CancelKeyPress += delegate (object sender, ConsoleCancelEventArgs e) {
        ///                e.Cancel = true;
        ///       [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string LinuxAlias {
            get {
                return ResourceManager.GetString("LinuxAlias", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Diagnostics;
        ///using System.Text.RegularExpressions;
        ///using System.Threading;
        ///using System.IO;
        ///
        ///namespace TestPipe
        ///{
        ///    class Program
        ///    {
        ///        const string command = [COMMAND];
        ///        const bool load_profile = [LOAD_PROFILE];
        ///        const bool convert_args = [CONVERT_ARGS];
        ///        const bool convert_input = [CONVERT_INPUT];
        ///        const bool convert_output = [CONVERT_OUTPUT];
        ///        static int Main(string[] args)
        ///        {
        ///            //Console.TreatContro [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string LinuxAliasAlt {
            get {
                return ResourceManager.GetString("LinuxAliasAlt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Diagnostics;
        ///using System.Runtime.InteropServices;
        ///using System.Text.RegularExpressions;
        ///
        ///namespace TestPipe
        ///{
        ///    class Program
        ///    {
        ///        [DllImport(&quot;kernel32.dll&quot;)]
        ///        static extern IntPtr GetConsoleWindow();
        ///        [DllImport(&quot;user32.dll&quot;)]
        ///        static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);
        ///        const int SW_HIDE = 0;
        ///        const int SW_SHOW = 5;
        ///
        ///        const string command = [COMMAND];
        ///        const bool hidden = [HIDDEN];
        ///     [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string WindowsAlias {
            get {
                return ResourceManager.GetString("WindowsAlias", resourceCulture);
            }
        }
    }
}
